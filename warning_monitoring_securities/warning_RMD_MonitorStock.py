import re

from bs4 import BeautifulSoup
from win32com.client import Dispatch

from warning.MonitorStock.job import *
from warning.MonitorStock.style import *
from warning.MonitorStock.report import Report

def __CheckAbnormal__(func):

    """
    This function send an emailn when there is any abnormal row in the report
    """

    def wrapper(*args, **kwargs):

        fullTable, fileWarningPath, fileReportPath = func(*args, **kwargs)
        abnormalTable = fullTable

        now = dt.datetime.now()

        if not abnormalTable.empty:
            abnormalTable = abnormalTable.rename({
                'MarketPrice': 'Market price',
                'ReferencePrice': 'Reference Price',
                'MaxPrice': 'Max Price',
                'GeneralRoom': 'General Room',
                'UsedSystemRoom': 'Used System Room',
                'SpecialRoom': 'Special Room',
                'UsedSpecialRoom': 'Used Special Room',
                'KiemTraGiamSan': 'Kiem Tra Giam San',
                '% MP/MarketPrice': '% MP/ Market Price'
            }, axis=1)

            abnormalTable.loc[:, ['% MP/ Market Price', '% Used GR/ Approved GR', 'Ratio']] *= 100

            def buildFormatters(table: pd.DataFrame):
                return {
                    column: lambda x: '{0:,.0f}'.format(x)
                    for column, dataType in table.dtypes.items()
                    if dataType == 'int64' or column == 'Ratio'
                }

            formatters = buildFormatters(abnormalTable)

            abnormalHTML = abnormalTable.to_html(
                formatters=formatters,
                index=False,
                header=True,
                float_format=lambda x: '{0:,.2f}'.format(x)
            ).replace("\\n", "<br>")

            abnormalHTML = re.sub(
                '<th>Kiem Tra Giam San</th>',
                '',
                abnormalHTML
            )
            abnormalHTML = re.sub(
                '<th>',
                formatTable1,
                abnormalHTML
            )
            abnormalHTML = re.sub(
                '<table border="1" class="dataframe">',
                formatTable2,
                abnormalHTML
            )
            abnormalHTML = re.sub(
                '<td>',
                '<td style="text-align: center;border: 1px solid Black;">',
                abnormalHTML
            )

            soup = BeautifulSoup(abnormalHTML, 'html.parser')
            for i in soup.find_all('tr')[1:]:  # không lấy tiêu đề

                stock = i.find_all('td')[0].string
                marketPrice = i.find_all('td')[1].string
                maxPrice = i.find_all('td')[3].string
                checkGiamSan = i.find_all('td')[-3].string
                remainingPOuts = i.find_all('td')[-4].string
                percentUsedGRDivApprovedGR = i.find_all('td')[-5].string
                percentMPDivMarketPrice = i.find_all('td')[-6].string

                if int(checkGiamSan) == 1:
                    stock.wrap(soup.new_tag(format1))
                    marketPrice.wrap(soup.new_tag(format1))
                if float(percentMPDivMarketPrice) <= 5:
                    percentMPDivMarketPrice.wrap(soup.new_tag(format2))
                    maxPrice.wrap(soup.new_tag(format2))
                if float(percentUsedGRDivApprovedGR) >= 85:
                    percentUsedGRDivApprovedGR.wrap(soup.new_tag(format2))
                if int(remainingPOuts.replace(',', '')) < 1.5e9:
                    remainingPOuts.wrap(soup.new_tag(format1))
                i.find_all('td')[-3].replaceWith('')
            abnormalHTML = soup.prettify()
            abnormalHTML = re.sub(
                '<td style="text-align: center;border: 1px solid Black;">\\n    <td bgcolor',
                '<td bgcolor',
                abnormalHTML
            )
            abnormalHTML = re.sub(
                format3,
                '',
                abnormalHTML
            )

            html = f"""
            <html>
                <head></head>
                <body>
                    {abnormalHTML}
                    <p style="font-family:Times New Roman; font-size:90%"><i>
                        -- Generated by Reporting System
                    </i></p>
                </body>
            </html>
            """
            outlook = Dispatch('outlook.application')
            mail = outlook.CreateItem(0)
            mail.To = 'anhnguyenthu@phs.vn; anhhoang@phs.vn; huyhuynh@phs.vn; phuhuynh@phs.vn'
            mail.CC = 'namtran@phs.vn; quangpham@phs.vn'
            # mail.To = 'namtran@phs.vn'  # dev mode
            mail.Subject = f"Monitor Stock {now.strftime('%H.%M.%S')} {now.strftime('%d.%m.%Y')}"
            mail.HTMLBody = html
            for file in (fileWarningPath, fileReportPath):
                mail.Attachments.Add(file)
            mail.Send()

    return wrapper


@__CheckAbnormal__
def run():

    # Ngày chạy
    runTime = dt.datetime.now()

    # đồng bộ dữ liệu bảng điện, vpr0109 và 230007
    dateString = runTime.strftime('%Y-%m-%d')
    print("Waiting to SYNC data table vpr0109 ...")
    SYNC(connect_DWH_CoSo, 'spvpr0109', FrDate=dateString, ToDate=dateString)
    print("Waiting to SYNC data table 230007 ...")
    SYNC(connect_DWH_CoSo, 'sp230007', FrDate=dateString, ToDate=dateString)
    print("Waiting to SYNC data BangDienRealTime ...")
    EXEC(connect_DWH_ThiTruong, 'spBangDienRealTime')
    print("Waiting to SYNC data table DataHop ...")
    EXEC(connect_DWH_CoSo, 'spDataHop', Date=dateString)

    # khởi tạo Report
    report = Report()

    # File excel chứa các mã cảnh báo
    warningTable = report.runMailWarningReport
    writeExcelWarning = ExcelWriterMailWarning()
    writeExcelWarning.inputData = warningTable
    writeExcelWarning.run()

    # File excel report Review MP
    reportTable = report.runReviewMPReport
    writeExcelReport = ExcelWriterReviewMPReport()
    writeExcelReport.inputData = reportTable

    if runTime.hour >= 18:  # sau 18h luôn gửi file Report 4 sheet
        option = 'full'
    else:  # gửi file report 2 sheet 1 & 2
        option = 'half'

    writeExcelReport.run(option)

    # Xuất data gốc vpr0109, 230007, BangDienRealTime cho phòng nghiệp vụ
    timeString = runTime.strftime('%H.%M.%S')
    if not os.path.isdir(join(writeExcelWarning.pathToDataFile, 'Data')):
        os.mkdir((join(writeExcelWarning.pathToDataFile, 'Data')))
    if not os.path.isdir(join(writeExcelWarning.pathToDataFile, 'Data', timeString)):
        os.mkdir((join(writeExcelWarning.pathToDataFile, 'Data', timeString)))

    pathToDataFile = join(writeExcelWarning.pathToDataFile, 'Data', timeString)
    vpr0109 = pd.read_sql(
        f"""
        SELECT *
        FROM [vpr0109]
        WHERE [date] = '{runTime.strftime('%Y-%m-%d')}'
        """
        , connect_DWH_CoSo
    )
    vpr0109.to_excel(join(pathToDataFile, 'vpr0109.xlsx'))

    table_230007 = pd.read_sql(
        f'''
        SELECT * 
        FROM [230007]
        WHERE [date] = '{runTime.strftime('%Y-%m-%d')}'
        '''
        , connect_DWH_CoSo
    )
    table_230007.to_excel(join(pathToDataFile, '230007.xlsx'))

    bangDienRealtime = pd.read_sql(
        f'''
        SELECT * 
        FROM [DWH-ThiTruong].[dbo].[BangDienRealTime]
        '''
        , connect_DWH_CoSo
    )
    bangDienRealtime.to_excel(join(pathToDataFile, 'Bảng điện.xlsx'))

    return warningTable, writeExcelWarning.pathToAttachFile, writeExcelReport.pathToAttachFile
