import datetime as dt
import pandas as pd

from win32com.client import Dispatch

from automation.risk_management.MonthlyDealReport.job import ExcelWriterUpdate, ImportFile
from automation.risk_management.MonthlyDealReport.data import SheetMonthlyDealUpdate, SheetSummaryInfoUpdate, Liquidity3M
from datawarehouse import EXEC
from request import connect_DWH_CoSo

def __CheckAbnormal__(func):

    """
    This function send an emailn when there is any abnormal row in the report
    """

    def wrapper(*args, **kwargs):

        fullTable, fileReportPath = func(*args, **kwargs)
        abnormalTable = fullTable.loc[
            fullTable['Check'] == 'Y'
        ].reset_index(drop=True)

        now = dt.datetime.now()

        if not abnormalTable.empty:

            html = f"""
            <html>
                <head></head>
                <body>
                    Dear Risk,
                    <p style="font-family:Times New Roman; font-size:90%">
                        Monthly Deal Report {now.strftime('%d.%m.%Y')}
                    </p>
                    <p style="font-family:Times New Roman; font-size:90%">
                        Thanks & Best Regards.
                    </p>
                    <p style="font-family:Times New Roman; font-size:90%"><i>
                        -- Generated by Reporting System
                    </i></p>
                </body>
            </html>
            """
            outlook = Dispatch('outlook.application')
            mail = outlook.CreateItem(0)
            mail.To = 'anhnguyenthu@phs.vn; anhhoang@phs.vn; huyhuynh@phs.vn; phuhuynh@phs.vn'
            mail.CC = 'namtran@phs.vn; quangpham@phs.vn'
            # mail.To = 'namtran@phs.vn'  # dev mode
            mail.Subject = f"Monthly Deal Warning {now.strftime('%d.%m.%Y')}"
            mail.HTMLBody = html
            mail.Attachments.Add(fileReportPath)
            mail.Send()

    return wrapper

# @__CheckAbnormal__
def run(runDate: dt.datetime = dt.datetime.now()):
    importInit = ImportFile()
    importInit.runDate = runDate
    importInit.readFile()

    runDateString = runDate.strftime("%Y-%m-%d")
    EXEC(connect_DWH_CoSo, 'spDataHop', Date=runDateString)

    # Sheet Summary Info
    dataSheetSummaryInfo = SheetSummaryInfoUpdate()
    dataSheetSummaryInfo.runDate = runDate
    tableSheetSummaryInfo = dataSheetSummaryInfo.result
    # Sheet Monthly Deal
    dataSheetMontlyDeal = SheetMonthlyDealUpdate()
    dataSheetMontlyDeal.runDate = runDate
    tableSheetMontlyDeal = dataSheetMontlyDeal.result
    # warning list EOD
    warningListEOD = Liquidity3M()
    warningListEOD.runDate = runDate
    dataFromWarningRMDEOD = warningListEOD.result
    tableSheetMontlyDeal = tableSheetMontlyDeal.merge(
        dataFromWarningRMDEOD,
        how='left',
        on='Stock'
    )
    tableSheetMontlyDeal['3M Avg. Volume'].fillna(0, inplace=True)
    tableSheetMontlyDeal['P.OutsSetUp'] = tableSheetMontlyDeal['Setup'] * tableSheetMontlyDeal['MaxRatio'] * tableSheetMontlyDeal['MaxPrice']
    tableSheetMontlyDeal['MR_Ratio'] = tableSheetMontlyDeal['MR_Ratio'] * 100
    tableSheetMontlyDeal['DP_Ratio'] = tableSheetMontlyDeal['DP_Ratio'] * 100
    tableSheetMontlyDeal.fillna(0, inplace=True)

    # write to Excel
    excelWriter = ExcelWriterUpdate(inputDate=runDate)
    excelWriter.dataSheet1 = tableSheetSummaryInfo
    excelWriter.dataSheet2 = tableSheetMontlyDeal
    filePath = excelWriter.writeExcel()

    return tableSheetMontlyDeal, filePath

